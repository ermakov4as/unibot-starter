module.exports = {
    which_state_are_you_gonna_train: which_state_are_you_gonna_train,
    go_to_dict_main: go_to_dict_main,
    generate_audio_file: generate_audio_file,
    generate_aam
}

const instances = require('../../instances')
const serv = instances.server
const c = console.log
let IN_PROCESS = false

function which_state_are_you_gonna_train(user) {
    if (IN_PROCESS) {
        user.send('–ê–ê–ú-—Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á—É –∏ –ø—Ä–∏—à–ª—é –µ–≥–æ.')
        return
    }
    serv.getDictInfo({ key: user.key }, (res) => {
        let amm = {
            text: Math.min(res[0].question_audio_count, res[0].answer_audio_count),
            sound: Math.min(res[1].question_audio_count, res[1].answer_audio_count),
            reversed: Math.min(res[2].question_audio_count, res[2].answer_audio_count),
            done: Math.min(res[3].question_audio_count, res[3].answer_audio_count),
        }

        if (amm.text + amm.sound + amm.reversed + amm.done) {
            let msg = `–§—Ä–∞–∑ –≤ —Å–ª–æ–≤–∞—Ä–µ: *${res[0].count + res[1].count + res[2].count + res[3].count}*\n` +
                `\t\t1. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞(üá¨üáßüìñ)................${res[0].count}\n` +
                `\t\t2. –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ —Å–ª—É—Ö(üá¨üáßüéß)..............${res[1].count}\n` +
                `\t\t3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã(üá∑üá∫=>üá¨üáß)...........${res[2].count}\n` +
                `\t\t–ò–∑—É—á–µ–Ω–æ (‚úÖ)............................................${res[3].count}\n` +
                `–ß—Ç–æ –±—É–¥–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?`
            let keyboard = []
            let hightLine = []
            if (amm.text)
                hightLine.push('üá¨üáßüìñ')
            if (amm.sound)
                hightLine.push('üá¨üáßüéß')
            if (amm.reversed)
                hightLine.push('üá∑üá∫=>üá¨üáß')
            if (hightLine.length)
                keyboard.push(hightLine)
            let lowerLine = ['‚¨ÖÔ∏è']
            if (amm.reversed)
                lowerLine.push('‚úÖ')
            keyboard.push(lowerLine)
            user.addKeyboard(keyboard)
            user.done(msg)
        } else
            user.send('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê–ê–ú-—Ñ–∞–π–ª–æ–≤, –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–æ–ª–∂–Ω—ã —Ñ—Ä–∞–∑—ã –Ω–∞ —Å—Ç–∞–¥–∏–∏ üá¨üáßüéß –∏–ª–∏ –≤—ã—à–µ.')
    })
}

function generate_audio_file(user, nextStep) {
    if (user.input.body == 'üá¨üáßüìñ')
        type = 'text'
    else if (user.input.body == 'üá¨üáßüéß')
        type = 'sound'
    else if (user.input.body == 'üá∑üá∫=>üá¨üáß')
        type = 'reversed'
    else if (user.input.body == '‚úÖ')
        type = 'done'
    else {
        nextStep(user)
        return
    }
    let req = {
        key: user.key,
        type: type,
        count: 50,
        order: [{ ru: 6 }, { en: 2 }, { en: 2 }]
    }

    IN_PROCESS = true
    user.state = 'main'
    user.addMessage('–ù–∞—á–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ê–ê–ú‚Äì—Ñ–∞–π–ª. –ö–∞–∫ –∑–∞–∫–æ–Ω—á—é, –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µüëå')
    nextStep(user)
    serv.getGenerateAAM(req, file => {
        IN_PROCESS = false
        if (file) {
            user.state = 'main'
            user.done('–ê–ê–ú‚Äì—Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–æ—Ç–æ–≤!')
            user.sendAudio(file)
        } else {
            console.log('–§–∞–π–ª –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. Response:')
            console.log(file)
        }
    })
}

function go_to_dict_main(user, nextStep) {
    delete user.studing
    user.state = 'dict_main'
    nextStep(user)
}

function generate_aam(user, nextStep) {
    if (IN_PROCESS) {
        user.send('–ê–ê–ú-—Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á—É –∏ –ø—Ä–∏—à–ª—é –µ–≥–æ.')
        return
    } else {
        let req = {
            key: user.key,
            type: 'reversed',
            count: 50,
            order: [{ ru: 6 }, { en: 2 }, { en: 2 }]
        }

        IN_PROCESS = true
        user.state = 'main'
        user.addMessage('–ù–∞—á–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ê–ê–ú‚Äì—Ñ–∞–π–ª. –ö–∞–∫ –∑–∞–∫–æ–Ω—á—é, –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µüëå')
        nextStep(user)
            /*serv.getAAM(req, res => { // TODO: 
                if (res) {
                    let audio = res.audio
                    user.sendAudio(audio)
                    user.send()
                }
            })*/
        serv.getGenerateAAM(req, file => {
            IN_PROCESS = false
            if (file) {
                user.state = 'main'
                user.done('–ê–ê–ú‚Äì—Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–æ—Ç–æ–≤!')
                user.sendAudio(file)
            } else {
                console.log('–§–∞–π–ª –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. Response:')
                console.log(file)
            }
        })
    }
}



// en ‚Äì> ru –ª–µ–≥–∫–∏–π: 	en ‚Äì 4 ‚Äì en ‚Äì 5 ‚Äì ru ‚Äì 2. 		(50 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) 	‚âà17c x 50 ‚âà 14 –º–∏–Ω.
// en ‚Äì> ru —Å—Ä–µ–¥–Ω–∏–π: 	en ‚Äì 2 ‚Äì en ‚Äì 4 ‚Äì ru ‚Äì 1 ‚Äì en ‚Äì 2. 	(50 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) 	‚âà16—Å —Ö 50 ‚âà13 –º–∏–Ω.
// en ‚Äì> ru —Ö–∞—Ä–¥: 	en ‚Äì 3 ‚Äì ru ‚Äì 2 			(100 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) 	‚âà9—Å —Ö 100 ‚âà15 –º–∏–Ω.
// ru ‚Äì> en –ª–µ–≥–∫–∏–π:	ru ‚Äì 8 ‚Äì en ‚Äì 1 ‚Äì en ‚Äì 1. 		(50 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) 	‚âà16—Å —Ö 50 ‚âà13 –º–∏–Ω.
// ru ‚Äì> en —Å—Ä–µ–¥–Ω–∏–π: 	ru ‚Äì 6 ‚Äì en ‚Äì 1 ‚Äì en ‚Äì 1. 		(50 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) 	‚âà14—Å —Ö 50 ‚âà12 –º–∏–Ω.
// ru ‚Äì> en —Ö–∞—Ä–¥:		ru ‚Äì 4 ‚Äì en ‚Äì 1 ‚Äì en ‚Äì 1. 		(50 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) 	‚âà12—Å —Ö 50 ‚âà10 –º–∏–Ω.


// const AAM_PARAMS = {
//     en: {
//         easy: {
//             order: [{ en: 4 }, { en: 5 }, { ru: 2 }],
//             count: 50
//         },
//         medium: {
//             order: [{ en: 2 }, { en: 4 }, { ru: 1 }, { en: 2 }],
//             count: 50
//         },
//         hard: {
//             order: [{ en: 3 }, { ru: 2 }],
//             count: 100
//         }
//     },
//     ru: {
//         easy: {
//             order: [{ ru: 8 }, { en: 1 }, { en: 1 }],
//             count: 50
//         },
//         medium: {
//             order: [{ ru: 6 }, { en: 1 }, { en: 1 }],
//             count: 50
//         },
//         hard: {
//             order: [{ ru: 4 }, { en: 1 }, { en: 1 }],
//             count: 50
//         }
//     },
//     done: {
//         easy: {
//             order: [{ en: 3 }, { en: 2 }],
//             count: 200
//         },
//         medium: {
//             order: [{ en: 2 }],
//             count: 300
//         },
//         hard: {
//             order: [{ en: 0 }],
//             count: 500
//         }
//     }
// }

// function get_aam_status(user) {
//     if (IN_PROCESS) {
//         user.send('–ê–ê–ú-—Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á—É –∏ –ø—Ä–∏—à–ª—é –µ–≥–æ.')
//         return
//     }
//     serv.getDictInfo({ key: user.key }, (res) => {
//         let amm = {
//             en: Math.min(res[1].question_audio_count, res[1].answer_audio_count),
//             ru: Math.min(res[2].question_audio_count, res[2].answer_audio_count),
//             done: res[3].question_audio_count
//         }
//         if (amm.en + amm.ru + amm.done) {
//             let msg = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ê–ê–ú-—Ç–∏–ø—ã:\n` +
//                 `üá¨üáß => üá∑üá∫................${amm.en}\n` +
//                 `üá∑üá∫ => üá¨üáß................${amm.ru}\n` +
//                 `‚úÖ............................${amm.done}\n\n` +
//                 `–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n` +
//                 `‚ö™Ô∏è ‚Äì –ª–µ–≥–∫–∏–π\n` +
//                 `üîµ ‚Äì —Å—Ä–µ–¥–Ω–∏–π\n` +
//                 `üî¥ ‚Äì —Ç—è–∂–µ–ª—ã–π\n`
//             let keyboard = []
//             if (amm.en)
//                 keyboard.push(['üá¨üáß=>üá∑üá∫ ‚ö™Ô∏è', 'üá¨üáß=>üá∑üá∫ üîµ', 'üá¨üáß=>üá∑üá∫ üî¥'])
//             if (amm.ru)
//                 keyboard.push(['üá∑üá∫=>üá¨üáß ‚ö™Ô∏è', 'üá∑üá∫=>üá¨üáß üîµ', 'üá∑üá∫=>üá¨üáß üî¥'])
//             if (amm.done)
//                 keyboard.push(['‚úÖ ‚ö™Ô∏è', '‚úÖ üîµ', '‚úÖ üî¥'])
//             keyboard.push(['‚¨ÖÔ∏è'])
//             user.addKeyboard(keyboard)
//             user.done(msg)
//         } else
//             user.send('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê–ê–ú-—Ñ–∞–π–ª–æ–≤, –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–æ–ª–∂–Ω—ã —Ñ—Ä–∞–∑—ã –Ω–∞ —Å—Ç–∞–¥–∏–∏ üá¨üáßüéß –∏–ª–∏ –≤—ã—à–µ.')
//     })
// }

// function generate_audio_file(user, nextStep) {
//     let params = user.input.body.split(' ')
//     let type = level = false
//     if (params[0] == 'üá¨üáß=>üá∑üá∫')
//         type = 'en'
//     else if (params[0] == 'üá∑üá∫=>üá¨üáß')
//         type = 'ru'
//     else if (params[0] == '‚úÖ')
//         type = 'done'
//     else {
//         nextStep(user)
//         return
//     }


//     if (params[1] == '‚ö™Ô∏è')
//         level = 'easy'
//     else if (params[1] == 'üîµ')
//         level = 'medium'
//     else if (params[1] == 'üî¥')
//         level = 'hard'
//     let req = {
//         key: user.key,
//         type: type,
//         count: AAM_PARAMS[type][level].count,
//         order: AAM_PARAMS[type][level].order
//     }
//     IN_PROCESS = true
//     user.state = 'main'
//     user.addMessage('–ù–∞—á–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ê–ê–ú‚Äì—Ñ–∞–π–ª. –ö–∞–∫ –∑–∞–∫–æ–Ω—á—é, –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µüëå')
//     nextStep(user)
//     serv.getGenerateAAM(req, file => {
//         IN_PROCESS = false
//         if (file) {
//             user.state = 'main'
//             user.done('–ê–ê–ú‚Äì—Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–æ—Ç–æ–≤!')
//             user.sendAudio(file)
//         } else {
//             console.log('–§–∞–π–ª –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. Response:')
//             console.log(file)
//         }
//     })
// }