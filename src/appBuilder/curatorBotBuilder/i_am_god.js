module.exports = {
    if_there_is_command_make_something: if_there_is_command_make_something
}

const instances = require('../../instances')
const userBot = instances.userBot
const serv = instances.server
const t4 = instances.time4
const c = console.log

let TO_MANY = false
let SENDED_ONCE = false

const PROGRAMMS = {
    regus: {
        func: regus,
        desc: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∑—ã–≤–∞—è –µ–º—É –∑–∞–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É.',
        example: '$regus newemail@gmail.com pass3f2 1200 [–í—è—á–∏–∫]'
    },
    help: {
        func: help,
        desc: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–≤–æ–¥ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –Ω–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ',
        example: '$help'
    },
    linkinsert: {
        func: () => { },
        desc: '–ü—Ä—Å—Ç–æ –ø—Ä–∏–º–µ—Ä –∫–∞–∫ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏',
        example: '[—è–∫–æ—Ä—å](https://app.swift-english.com/dictionary/?auth_token=KEY>)'
    },
    rename: {
        func: rename,
        desc: '–°–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
        example: '$rename –ù–æ–≤–æ–µ–ò–º—è'
    },
    rmuser: {
        func: rmuser,
        desc: '—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        example: '$rmuser'
    },
    setday: {
        func: setday,
        desc: '–£—Å—Ç–∞–Ω–≤–æ–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–Ω–∞–ª–∞',
        example: '$setday 4'
    },
    nextday: {
        func: nextday,
        desc: '–û—Ç–∫—Ä—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è',
        example: '$nextday'
    },
    main: {
        func: main,
        desc: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–≤–Ω—É—é',
        example: '$main –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–Ω–∞–ª'
    },
    dialog: {
        func: dialog,
        desc: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ª–æ–≥–∞',
        example: '$dialog –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–Ω–∞–ª'
    },
    addphrases: {
        func: addphrases,
        desc: '–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–æ–≤–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞',
        example: '$addphrases 1 ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ—Ä–∞–∑—ã –∏–∑ —É—Ä–æ–∫–∞ 1'
    }
}

function if_there_is_command_make_something(nextStep, TOEVERYONE) {
    return (user) => {
        if (user.input.body[0] == '$') {
            TO_MANY = TOEVERYONE
            SENDED_ONCE = false
            let line = user.input.body.slice(1)
            let argv = line.split(' ')
            let programm = argv[0]
            argv.shift()
            if (!(programm in PROGRAMMS))
                user.send(`-mirror: ${programm}: command not found`)
            else if (TO_MANY)
                userBot.getUsersInfo(['id', 'key'], (users) => {
                    for (let u of users)
                        if (u.key)
                            userBot.getUserById(u.id, client => PROGRAMMS[programm].func(user, client, argv))
                })
            else
                userBot.getUserById(user.currentUser.id, client => PROGRAMMS[programm].func(user, client, argv))
        }
        else
            nextStep(user)
    }
}

////////////////////////////////////////////////////////////
///////////////             PROGRAMMS          /////////////
///////////////////////////////////////////////////////////

function regus(curator, client, argv) {
    if (TO_MANY) {
        if (!SENDED_ONCE) {
            SENDED_ONCE = true
            curator.send(`–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥.`)
        }
        return
    }

    let email = argv[0]
    let pass = argv[1]
    let payment = argv[2]
    if (!payment) {
        curator.send(`–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
        return
    }
    let name = argv[3] || client.name
    if (!name) {
        curator.send(`–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)
        return
    }
    let thread_id = userBot.data.thread_id //t4.get_thread_id() –ò–ó –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê –ë–û–¢–ê
    let data = {
        "key": curator.key,
        "email": email,
        "password": pass,
        "thread_id": thread_id,
        "nickname": name,
        "payment": Number(payment)
    }
    serv.registration(data, (res) => {
        if (!res) {
            curator.send(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)
        } else {
            let oldId = client.id
            client.id = res.id
            client.name = res.nickname
            client.key = res.auth
            client.login = email
            client.pass = pass
            client.state = 'dialog'
            client.save()
            //–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É –∫—Ä–∞—Ç–æ—Ä–∞ –æ –∫–ª–∏–µ–Ω—Ç–µ
            curator.currentUser.name = client.name
            curator.currentUser.id = client.id
            for (let us of curator.groups[curator.curGroup])
                if (us.id == oldId)
                    us = { id: client.id, name: client.name }
            curator.done(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!`)
        }
    })
}

function help(curator, client, argv) {
    let msg = ''
    for (let prog in PROGRAMMS)
        msg += `*${PROGRAMMS[prog].example}* ‚Äì ${PROGRAMMS[prog].desc}\n\n`
    if (!SENDED_ONCE) {
        SENDED_ONCE = true
        curator.send(msg)
    }
}

function rename(curator, client, argv) {
    if (TO_MANY) {
        if (!SENDED_ONCE) {
            SENDED_ONCE = true
            curator.send(`–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥.`)
        }
        return
    }
    if (argv[1]) {
        if (argv[argv.length - 1] == '-g') {
            argv.pop()
            let old = client.globalName ? client.globalName : client.name
            client.globalName = argv.join(' ')
            serv.putRename({ key: curator.key, id: client.id, globalName: client.globalName }, (res) => {
                if (res) {
                    client.save()
                    curator.send(`üéì–ë—ã–ª–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${old}\n–°–º–µ–Ω–∏–ª–∏ –Ω–∞: ${client.globalName}\n –û–±—Ä–∞—â–µ–Ω–∏–µ: ${client.name}`)
                }
            })
        } else
            curator.send(`üéì–¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π rename <name> -g`)
    } else {
        let old = client.name
        client.name = argv[0]
        client.save()
        curator.send(`üéì–°–º–µ–Ω–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ${old} –Ω–∞ ${client.name}`)
    }
}


function rmuser(curator, client, argv) {
    if (TO_MANY) {
        if (!SENDED_ONCE) {
            SENDED_ONCE = true
            curator.send(`–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥.`)
        }
        return
    }
    client.delete()
    curator.send(`–£—Ä–∞! –£–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)
}

function setday(curator, client, argv) {
    if (!TO_MANY) {
        curator.send(`–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–º–µ–Ω–∏–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´—Ä–∞—Å—Å–ª—ã–∫–∞¬ª.`)
        return
    }
    if (!SENDED_ONCE) {
        SENDED_ONCE = true
        let day = Number(argv[0])
        t4.setday(day)
        curator.send(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ–Ω—å ${day}`)
    }
}

function nextday(curator, client, argv) {
    if (!TO_MANY) {
        curator.send(`–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–º–µ–Ω–∏–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´—Ä–∞—Å—Å–ª—ã–∫–∞¬ª.`)
        return
    }
    if (!SENDED_ONCE) {
        SENDED_ONCE = true
        let day = t4.nextday()
        curator.send(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ–Ω—å ${day}`)
    }
}

function main(curator, client, argv) {
    c(client)
    if (client.key) {
        client.state = 'main'
        if (argv.length) {
            let msg = argv.join(' ')
            client.addMessage(msg)
        }
        client.Fsx()
        if (!SENDED_ONCE) {
            SENDED_ONCE = true
            if (TO_MANY)
                curator.send(`–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥–ª–∞–≤–Ω—É—é`)
            else
                curator.send(`–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${client.name} –Ω–∞ –≥–ª–∞–≤–Ω—É—é`)
        }
    }
}

function dialog(curator, client, argv) {
    if (client.key)
        client.state = 'dialog'
    else
        client.state = 'auth_help'
    if (argv.length) {
        let msg = client.insertAttrs(argv.join(' '))
        client.addMessage(msg)
        client.Fsx()
        if (!SENDED_ONCE) {
            SENDED_ONCE = true
            if (TO_MANY)
                curator.send(`–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ª–æ–≥–∞`)
            else
                curator.send(`–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${client.name} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ª–æ–≥–∞`)
        }
    }
}

function addphrases(curator, client, argv) {
    let lesson_num = Number(argv[0])
    if (lesson_num)
        serv.postAddPhrases({ key: client.key, lesson_num: lesson_num }, (res) => {
            if (!SENDED_ONCE && res) {
                SENDED_ONCE = true
                if (TO_MANY)
                    curator.send(`–í—Ä–æ–¥–µ –∫–∞–∫ –∑–±—Å –≤—Å–µ–º –¥–æ–±–∞–≤–∏–ª–∏`)
                else
                    curator.send(`–î–æ–±–∞–≤–∏–ª–∏ —Å–ª–æ–≤–∞ –∏–∑ —É—Ä–æ–∫–∞ ${lesson_num} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${client.name}`)
            }
        })
}